{
  "type": "ai:chat",
  "timestamp": "2025-09-05T19:49:10.210Z",
  "duration_ms": 39946,
  "request": {
    "model": "qwen-max-latest",
    "temperature": 0.7,
    "max_tokens": 2000,
    "system": "You are a helpful writing assistant.",
    "messages": [
      {
        "role": "system",
        "content": "You are a helpful writing assistant."
      },
      {
        "role": "user",
        "content": "你好，请在页面内写一个草稿，接着我的标题\n\n[上下文]\n文件: 2508.15595v1.pdf (第3页)\n内容: \n文本: 802.11(WLAN) and 5G NFs on demand. O-RAN is a frame-work that disaggregated the 5G gNB-DU into O-DU, and O-RU. As per the principles of SDN, it also separates the controlplane from 5G gNB and places it in two distinct controllers[5]. The Non-Real-Time RIC (Non-RT RIC) controls tasks withhigher latency (>\n\n文件: 2508.15595v1.pdf (第3页)\n内容: \n文本: execute the control functions provided in the CFR document.The codegen agent generates this interface API server usingknowledge from an internal API document which is present\n\n文件: 2508.15595v1.pdf (第3页)\n内容: \n文本: function does not have a direct matching function in the internalAPI. The codegen agent generates a wrapper function aroundthe internal API function which is most similar to support theadditional functionality required by the control function.\n\n文件: 2508.15595v1.pdf (第3页)\n内容: \n文本: validity of the generated interface server. This test code mayalso be provisioned by the NFsrc. If the interface server codethrows errors in this test, this error is fed back to the LLM toregenerate this code. The agent can do it multiple times untilthe correct version of the code is generated (Fig. 2 step 6).\n\n文件: 2508.15595v1.pdf (第4页)\n内容: \n文本: embeddings are fetched and are passed to the LLM. In theresponse generation phase, the LLM generates a reply to theinput query based on the retrieved text embeddings. In caseof the matching agent, the NF capability document and thecontrol function requirements from user are used as input\n\n文件: 2508.15595v1.pdf (第4页)\n内容: \n文本: then generates the CFR document with the matched gNB orAP control functions. This CFR document is then sent to gNBand AP. This information is received by the codegen agents oneach NFs. These agents generate the code required for creatingthe interface API server. Note that the API server is uniquefor every vendor. The agent tests the code until the correctversion is generated. Once this is successful it then sends a\n\n文件: 2508.15595v1.pdf (第4页)\n内容: \n文本: requirements using Claude 3.5 Sonnet [9]. We then used thesevariations as input to the matching agent and observed whetherit correctly matches them to the capabilities of the AP/gNBand how many attempts were required to achieve a correctmatch. Figure 4 shows the number of attempts and the totaltime required to match 60 requirements. The diameter of the\n\n文件: 2508.15595v1.pdf (第5页)\n内容: \n文本: of the circle represents the cost. We observe that the codegeneration was predominantly successful on the first attempt.Compared to the matching task, coding task is more complex.Here, the performance gap between Llama3.3 and GPT-4oincreases significantly. In this case, GPT-4o based agent is 10- diverse operational conditions. The performance of agentsalso depends on the availability of well-structured anddetailed capability and API documentation [10].• Considering real-world deployment of this framework,security of network functions might be affected by LLMspecific threat vectors. These might be direct or indirectprompt injection or context windows overloading [11]. Inour experiments, we observed that the size of the contextwindow matters for accuracy. If the number of controlfunctions in a single query is too large the models start\n\n文件: 2508.15595v1.pdf (第5页)\n内容: \n文本: cessfully augment the functions when clear and structuredinstructions were provided in the requirements. On average, thistask took 3 times longer and was 3 times more expensive thangenerating non-augmented control functions. However, whenwe tried to create more complex augmented control functions"
      }
    ]
  },
  "response": {
    "content": "标题：基于O-RAN架构的5G网络功能动态生成与优化研究\n\n草稿：\n\n本文探讨了在O-RAN架构下，如何通过解耦5G gNB-DU为O-DU和O-RU，并结合软件定义网络（SDN）原则，将控制平面从5G gNB中分离并部署到两个独立的控制器中。Non-Real-Time RIC（非实时RIC）负责处理高延迟任务，而代码生成代理则根据内部API文档生成接口API服务器以执行CFR文档中定义的控制功能。\n\n在实现过程中，若某一控制功能在内部API中没有直接匹配的功能，则代码生成代理会围绕最相似的内部API功能创建一个包装函数，以支持额外所需的功能。为了验证生成的接口服务器的有效性，测试代码可能会由NFsrc提供。如果接口服务器代码在测试中出现错误，该错误会被反馈给大型语言模型（LLM），以便重新生成代码。此过程可以多次迭代，直到生成正确的代码版本（如图2步骤6所示）。\n\n在响应生成阶段，LLM基于检索到的文本嵌入生成对输入查询的回复。对于匹配代理，NF能力文档和用户提供的控制功能需求被用作输入。匹配代理随后生成包含匹配的gNB或AP控制功能的CFR文档，并将其发送至gNB和AP。每个NF上的代码生成代理接收这些信息，并生成用于创建接口API服务器的代码。需要注意的是，API服务器因供应商而异，代理会反复测试代码，直到生成正确版本。\n\n实验中，我们使用Claude 3.5 Sonnet生成了多种需求变化，并将其作为输入提供给匹配代理，观察其是否能正确匹配AP/gNB的能力，以及完成正确匹配所需的尝试次数。图4显示了匹配60个需求所需的尝试次数和总时间，圆圈的直径表示成本。结果表明，代码生成在第一次尝试时通常就能成功。然而，与匹配任务相比，编码任务更为复杂。在此任务中，Llama3.3与GPT-4o之间的性能差距显著增加。基于GPT-4o的代理在多样化的操作条件下表现更优，但代理的性能还取决于结构化且详细的NF能力和API文档的可用性。\n\n在实际部署中，网络功能的安全性可能受到LLM特定威胁向量的影响，包括直接或间接的提示注入及上下文窗口过载。实验中发现，上下文窗口的大小对准确性至关重要。当单个查询中包含过多控制功能时，模型开始表现出性能下降。然而，在需求中提供清晰且结构化的指令时，代理能够成功增强功能。平均而言，此任务耗时比生成非增强型控制功能长3倍，成本也高出3倍。但当我们尝试创建更复杂的增强型控制功能时，系统的表现进一步受到挑战，显示出优化和改进的空间。\n\n未来工作将聚焦于提升代码生成的效率、增强安全性措施，以及探索在更复杂场景下的应用潜力。",
    "usage": {
      "prompt_tokens": 958,
      "completion_tokens": 632,
      "total_tokens": 1590
    }
  }
}